"""
Author: John Shapiro
Algorithms and Algorithm Analysis Fall 2019
Assignment 4: Random Number Generator
Allows the user to create a RandomGenerator object which can generate numbers from 1-10.
The functions outside of the class (check_sequence, run_tests)  are for testing the data generated by the RandomGenerator object.

Returns:
    object -- Random Number generator that generates numbers from 1 - 10 when generate_random() is called.
"""
import time
import math
import random
import os

class RandomGenerator():
    """Generates a sequence of 'random' numbers in the range 1 to 10. This class utilizes a purely hardcware solution, relying completely on 
        the time.time() function.
    """
    def __init__(self):
        """Initialize with a seed to be used to generate randoms. The seed is the current state
        """
        self.state = int(str(time.time())[-4:-1].replace('.',''))

    def generate_random(self):
        """Generate a random number based off of the state 
        
        Returns:
            int -- A random integer from 1-10
        """
        sleep_time = self.state/1000000
        time.sleep(sleep_time)
        self.state = int(str(time.time())[-4:-1].replace('.',''))
        return self.state % 10 + 1

def check_sequence(min_length, min_count, int_list):
    """Counts the numbers of sequences within the list. Code adapted with very few changes from
    https://cs.stackexchange.com/questions/79182/im-looking-for-an-algorithm-to-find-unknown-patterns-in-a-string
    
    Arguments:
        min_length {int} -- minimum length to be considered a sequence
        min_count {int} -- number of times it must appear before being considered repeated
        int_list {string} -- the list of randoms in string form. I'm using a string because the code I adapted does not work out of
            the box with a list and I was too lazy to adapt the code to do so, so I simply adapted my list instead.
    
    Returns:
        int -- The number of sequences found matching the given parameters
    """
    d={}
    for sublen in range(min_length,int(len(int_list)/min_count)):
        for i in range(0,len(int_list)-sublen):
            sub = int_list[i:i+sublen]
            cnt = int_list.count(sub)
            if cnt >= min_count and sub not in d:
                d[sub] = cnt
    return len(d)

def run_tests():
    """Calculate the average time to run and number of sequences in 100 randomly generated lists of 1000 numbers from
            Python's generator and my own. The sets are checked against eachother and the percent difference is printed.
    """
    generator = RandomGenerator()
    my_generator_time = 0
    py_generator_time = 0
    my_total_sequences = 0
    py_total_sequences = 0
    for i in range(100):
        py_randoms = []
        my_randoms = []
        # generate randoms from python's built-in random.randint()
        start = time.time()
        for j in range(1000):
            py_randoms.append(random.randint(1,10))
        elapsed = time.time() - start
        py_generator_time += elapsed
        py_total_sequences += check_sequence(10, 3, str(py_randoms))
        # generate randoms from my random number generator
        start = time.time()
        for k in range(1000):
            my_randoms.append(generator.generate_random())
        elapsed =  time.time() - start
        my_generator_time += elapsed
        my_total_sequences += check_sequence(10, 3, str(my_randoms))
    # compare the data generate by the two algorithms.
    time_difference = 100 * (my_generator_time - py_generator_time) / py_generator_time
    sequence_difference = 100 * (my_total_sequences - py_total_sequences) / py_total_sequences
    print(f"Time difference: {time_difference}\nSequence Difference: {sequence_difference}")  
    print(py_total_sequences, my_total_sequences)  

if __name__ == '__main__':
    run_tests()